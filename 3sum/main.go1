package main

import (
	"fmt"
	"sort"
)

func threeSum(nums []int) [][]int {
	result := make([][]int,0)
    if nums == nil || len(nums)<3 {
    	return result
	}
	sort.Slice(nums,func(i,j int)bool{
		return nums[i]<nums[j]
	})
	fmt.Println("nums:",nums)
	for i:=0;i<len(nums)-2;i++ {
		n1 :=nums[i]
		// 判断第一个元素如果大于0，后面相加不可能为0，因此退出
		if n1 >0 {
			break
		}
		//如果当前元素和上一个元素相等，则进行下一次循环
		if i>0 && n1==nums[i-1] {
			continue
		}
		//当前元素的下一个元素，和最右元素
		l,r := i+1,len(nums)-1
		for l<r {
			n2,n3 := nums[l],nums[r]
			sum :=n1+n2+n3
			if sum ==0 {
				result = append(result,[]int{n1,n2,n3})
				// 和当前元素比较跳过和当前元素相等的
				for l<r && n2==nums[l] {
					l++
				}
				// 最右元素去重
				for l<r && n3==nums[r] {
					r--
				}
 			}else if sum >0 {
 				r--
			}else {
				l++
			}
		}
	}
	return result
}
func main() {
	fmt.Println("output result:",threeSum([]int{0,0,0,0}))
	fmt.Println("output result:",threeSum([]int{-2,0,1,1,2}))
//[3,0,-2,-1,1,2]
	fmt.Println("output result:",threeSum([]int{3,0,-2,-1,1,2}))
	fmt.Println("output result:",threeSum([]int{-4,-2,-2,-2,0,1,2,2,2,3,3,4,4,6,6}))

	//[-2,0,1,1,2]
}
